Visitor is a behavioral design pattern that lets you define a new operation without changing the classes of the objects on which it operates.

The Visitor pattern suggests placing a new behavior into a separate class, 
instead of integrating it into existing classes. Objects related to the behavior, 
will not be calling it by themselves. They will be passed as arguments to methods of the visitor object instead.

Applicability

	When you need to perform an operation on all elements of a complex object structure (for example, a tree), and all the elements are heterogeneous.
		The Visitor pattern allows you to execute an operation over a set of objects with different classes.
		
	When you need to be able to run several unrelated behaviors over a complex object structure, 
	but you do not want to "clog" the structure's classes with the code of these behaviors.
	
	When a new behavior makes sense only for some classes from the existing hierarchy.